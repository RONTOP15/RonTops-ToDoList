{"version":3,"sources":["Context/Theme_Context.js","Components/Form.js","Components/Todo.js","Components/ToDoList.js","App.js","index.js"],"names":["themes","color","backgroundColor","themeContext","createContext","Form","setInputText","inputText","todos","setTodos","React","useContext","theme","setTheme","className","name","value","type","onChange","e","target","required","onClick","preventDefault","fetch","method","headers","Accept","body","JSON","stringify","text","then","res","json","todo","console","log","catch","err","class","Todo","style","completed","id","_id","data","map","item","index","filter","el","ToDoList","App","useState","useEffect","a","getDataFromServer","Provider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5de6fc5c.chunk.js","sourcesContent":["import { createContext } from \"react\"\r\n\r\nexport const themes = {\r\n    dark :{\r\n        color : \"white\",\r\n        backgroundColor : \"#302aa2\",\r\n        \r\n    },\r\n    light : {\r\n        color : \"black\",\r\n        backgroundColor : \"#57b6e2\",\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\nconst themeContext = createContext(themes.dark)\r\n\r\nexport default themeContext","import React from \"react\";\r\nimport themeContext, { themes } from \"../Context/Theme_Context\";\r\nimport \"../Styles/App.css\";\r\n\r\nconst Form = ({ setInputText, inputText, todos, setTodos }) => {\r\n  const { theme, setTheme } = React.useContext(themeContext);\r\n\r\n  const inputTextHandler = (e) => {\r\n    setInputText(e.target.value);\r\n  };\r\n\r\n  const handleClick = (e) => {\r\n    e.preventDefault();\r\n    if (inputText === \"\") {\r\n      return null;\r\n    }\r\n\r\n    fetch('/api/todo', {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",           \r\n      },\r\n      body: JSON.stringify({ text: inputText }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((todo) => {\r\n        console.log(todo);\r\n        setTodos([...todos, todo]);\r\n      })\r\n\r\n      .catch((err) => console.log(err));\r\n\r\n    setInputText(\"\");\r\n  };\r\n\r\n  const toggleTheme = (e) => {\r\n    e.preventDefault();\r\n    theme === themes.dark ? setTheme(themes.light) : setTheme(themes.dark);\r\n  };\r\n\r\n  return (\r\n    <form className=\"form\">\r\n      <input\r\n        name={inputText}\r\n        value={inputText}\r\n        type=\"text\"\r\n        className=\"todo-input\"\r\n        onChange={inputTextHandler}\r\n        required=\"required\"\r\n      />\r\n      <button className='add-btn raise' onClick={handleClick}> Add</button>\r\n\r\n      <button className=\"theme-btn raise\" onClick={toggleTheme}>\r\n      <i class=\"fas fa-palette\"></i>\r\n      </button>\r\n  \r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React, { useState, useContext } from \"react\";\r\nimport \"../Styles/App.css\";\r\nimport themeContext from \"../Context/Theme_Context\";\r\n\r\nexport const Todo = ({ todo, todos, setTodos }) => {\r\n  const { theme } = useContext(themeContext);\r\n\r\n  \r\n\r\n  const completeHandler = () => {\r\n    fetch(\"'/api/todo'\" + todo._id, {\r\n      method: \"PATCH\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        setTodos(\r\n          todos.map((item, index) => {\r\n            if (item._id === todo._id) {\r\n              return {\r\n                ...item,\r\n                completed: !item.completed,\r\n              };\r\n            }\r\n            return item;\r\n          })\r\n        );\r\n        return data;\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const trashHandler = () => {\r\n    fetch('/api/todo' + todo._id, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    }).catch((err) => console.log(err));\r\n    setTodos(() => todos.filter((el) => el._id !== todo._id));\r\n  };\r\n\r\n  return (\r\n    <div style={theme} className={`todo ${todo.completed ? \"completed\" : \"\"}`}>\r\n      <li\r\n        id={todo._id}\r\n        className={`todo-item ${todo.completed ? \"completed\" : \"\"}`}\r\n      >\r\n        {todo.text}\r\n      </li>\r\n      <div className=\"btnDiv\">\r\n        \r\n        <button\r\n        style={theme}\r\n          name=\"complete-btn\"\r\n          className=\"btn complete-btn\"\r\n          onClick={completeHandler}\r\n        >\r\n          <i className=\"far fa-check-square\"></i>\r\n        </button>\r\n\r\n        <button\r\n        style={theme}\r\n          name=\"trash-btn\"\r\n          className=\"btn trash-btn\"\r\n          onClick={trashHandler}\r\n        >\r\n          <i className=\"far fa-trash-alt\"></i>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Todo;\r\n","import React, { useContext } from \"react\";\r\nimport themeContext, { themes } from \"../Context/Theme_Context\";\r\nimport \"../Styles/App.css\";\r\nimport Todo from \"./Todo\";\r\n\r\nconst ToDoList = ({ todos, setTodos }) => {\r\n\r\n  console.log(\"Todolist\");\r\n  return (\r\n    <div className=\"todo-container\" >\r\n      <ul className=\"todo-list\">\r\n        {todos.map((todo) => (\r\n          <Todo key={todo._id} todo={todo} setTodos={setTodos} todos={todos} />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ToDoList;\r\n","import React, { useState, useEffect, useContext } from \"react\";\n// Components\nimport Form from \"./Components/Form\";\nimport ToDoList from \"./Components/ToDoList\";\nimport themeContext,{themes} from \"./Context/Theme_Context\";\n\nfunction App() {\n  const [inputText, setInputText] = useState(\"\");\n  const [todos, setTodos] = useState([]);\n  const [theme , setTheme] = useState(themes.dark)\n\n  useEffect( () => {\n    const getDataFromServer = async () => {\n       fetch('/api/todo',{\n        method : 'GET',\n        headers: {\n          \"Content-Type\": \"application/json\",\n          'Accept': 'application/json'\n        },\n      }).then(res => res.json())\n      .then(data =>{\n        if(!data){\n          console.log(data);\n          return \"no Data\"\n        }else{\n          setTodos(data)\n          return data\n\n        }\n      }).catch(err => console.log(err))\n      \n\n    };\n\n    getDataFromServer()\n  }, []);\n\n  return (\n    <themeContext.Provider value={{theme , setTheme}}>\n    <div  className=\"App\">\n\n      <div>\n        <h1> RonTops ToDoList </h1>\n        <div className=\"hero\">\n      </div >\n      <div className=\"Main-Container\">\n      <Form\n        \n        setInputText={setInputText}\n        inputText={inputText}\n        todos={todos}\n        setTodos={setTodos}\n\n      />\n      <ToDoList todos={todos} setTodos={setTodos} />\n      </div>\n      </div>\n    </div>\n    </themeContext.Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}